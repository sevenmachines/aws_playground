Parameters:
  VpcId:
      Type: String
  SubnetCidr:
      Type: String
  AvailabilityZone:
      Type: String
  InternetGatewayId:
      Type: String
  EnableIsolatedNetwork:
    Type: String
    AllowedValues: [true, false]

Conditions:
  CreateIsolatedNetwork: !Equals [!Ref EnableIsolatedNetwork, true]
Resources:
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Select [0, !Cidr [ !Ref SubnetCidr, 4, 8 ]]
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 
      - InternetGateway
    - AttachGateway
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayId

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable


  # Private Subnets
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Select [1, !Cidr [ !Ref SubnetCidr, 4, 8 ]]
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: false
  PrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateSubnetRouteTable
  
  # Isolated Subnets
  IsolatedSubnet:
    Condition: CreateIsolatedNetwork
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Select [2, !Cidr [ !Ref SubnetCidr, 4, 8 ]]
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: false
  IsolatedSubnetRouteTable:
    Condition: CreateIsolatedNetwork
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
  IsolatedSubnetRouteTableAssociation:
    Condition: CreateIsolatedNetwork
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref IsolatedSubnet
      RouteTableId: !Ref IsolatedSubnetRouteTable

  IsolatedNacl:
    Condition: CreateIsolatedNetwork
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref VpcId

  IsolatedNetworkAclEntry:
      Condition: CreateIsolatedNetwork
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref IsolatedNacl
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: false
         CidrBlock: !Select [2, !Cidr [ !Ref SubnetCidr, 4, 8 ]]

      
Outputs:
  PublicSubnetId:
    Value: !Ref PublicSubnet
  PublicSubnetCidr:
    Value: !Select [0, !Cidr [ !Ref SubnetCidr, 4, 8 ]]
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
  PrivateSubnetCidr:
    Value: !Select [1, !Cidr [ !Ref SubnetCidr, 4, 8 ]]
  IsolatedSubnetId:
    Condition: CreateIsolatedNetwork
    Value: !Ref IsolatedSubnet
  IsolatedSubnetCidr:
    Condition: CreateIsolatedNetwork
    Value: !Select [2, !Cidr [ !Ref SubnetCidr, 4, 8 ]]
    
  PublicSubnetRouteTable:
    Value: !Ref PublicSubnetRouteTable
  PrivateSubnetRouteTable:
    Value: !Ref PrivateSubnetRouteTable
  IsolatedSubnetRouteTable:
    Condition: CreateIsolatedNetwork
    Value: !Ref PublicSubnetRouteTable
