Parameters:
  DomainName:
    Type: String
    Default: ""
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  VpcCidr:
    Type: String
  EnableActiveDirectory:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: false
  EnableBastionAccess:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: 'true'
  EnablePublicBastion:
    Type: String
    Default: false
  EnableBastionFullAccessFromCidr:
    Type: String
    Default: ''
  TransitGatewayId:
    Type: String
    Default: ''
  EnableNetworking:
    Type: String
    AllowedValues:  [true, false]
    Default: false
  EnableEndpoints:
    Type: String
    AllowedValues:  [true, false]
    Default: false

Conditions:
  CreateBastion: !Equals [!Ref EnableBastionAccess, 'true']
  CreateNetworking: !Equals [!Ref EnableNetworking, 'true']
  CreateActiveDirectory: !Equals [!Ref EnableActiveDirectory, 'true']
  CreateEndpoints: !Equals [!Ref EnableEndpoints, 'true']
  IsBastionPublic: !Equals [!Ref EnablePublicBastion, true]
  UseDomainName: !Not [!Equals [!Ref DomainName, ""]]
Resources:

  NetworkStack:
    Condition: CreateNetworking
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './network.template'
      Parameters:
        VpcId: !Ref VpcId
        TransitGatewayId: !Ref TransitGatewayId
        SubnetIds: !Ref PublicSubnetIds
 
  Endpoints:
    Condition: CreateEndpoints
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './endpoints.template'
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !Join [',', !Ref PrivateSubnetIds]
 
  PrivateBastion:
    Condition: CreateBastion
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './bastion.template'
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !If
          - IsBastionPublic
          - !Join [',', !Ref PublicSubnetIds]
          - !Join [',', !Ref PrivateSubnetIds]
        EnablePublicAccess: !Ref EnablePublicBastion
        EnableFullAccessFromCidr: !Ref EnableBastionFullAccessFromCidr
        
  ActiveDirectoryStack:
    Condition: CreateActiveDirectory
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './active-directory.template'
      Parameters:
        VpcId: !Ref VpcId
        DomainName: !If
        - UseDomainName
        - !Ref DomainName
        - !Ref AWS::NoValue
        SubnetIds: !Join
          -  ','
          - - !Select [0, !Ref PrivateSubnetIds]
            - !Select [1, !Ref PrivateSubnetIds]
Outputs:
  BastionAutoScalingGroup:
    Value: GetAtt PrivateBastion.Outputs.BastionAutoScalingGroup
    Description: |
      'aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[].Instances[].{InstanceId: InstanceId, LaunchConfigurationName: LaunchConfigurationName}'
