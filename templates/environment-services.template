Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  VpcCidr:
    Type: String
  EnableBastionAccess:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: 'true'
  EnablePublicBastion:
    Type: String
    Default: false
  EnableBastionFullAccessFromCidr:
    Type: String
    Default: ''
  TransitGatewayId:
    Type: String
    Default: ''
  EnableAurora:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: 'false'
  AuroraDatabaseName:
    Type: String
  AuroraUsername:
    NoEcho: true
    Type: String
  EnableLegacyDatabase:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: 'false'
  LegacyDatabaseName:
    Type: String
  LegacyDatabaseUsername:
    NoEcho: true
    Type: String
  EnableRedshift:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: 'false'
  EnableNetworking:
    Type: String
    AllowedValues:  [true, false]
    Default: false
  RedshiftDatabaseName:
    Type: String
  RedshiftUsername:
    NoEcho: true
    Type: String
  EnableDMS:
    Type: String
    AllowedValues:  ['true', 'false']
    Default: 'false'

Conditions:
  CreateBastion: !Equals [!Ref EnableBastionAccess, 'true']
  CreateNetworking: !Equals [!Ref EnableNetworking, 'true']
  CreateAurora: !Equals [!Ref EnableAurora, 'true']
  CreateLegacyDatabase: !Equals [!Ref EnableLegacyDatabase, 'true']
  CreateDMS: !Equals [!Ref EnableDMS, 'true']
  CreateRedshift: !Equals [!Ref EnableRedshift, 'true']
  IsBastionPublic: !Equals [!Ref EnablePublicBastion, true]

Resources:

  NetworkStack:
    Condition: CreateNetworking
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './network.template'
      Parameters:
        VpcId: !Ref VpcId
        TransitGatewayId: !Ref TransitGatewayId
        SubnetIds: !Ref PublicSubnetIds
 
  PrivateBastion:
    Condition: CreateBastion
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './bastion.template'
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !If
          - IsBastionPublic
          - !Join [',', !Ref PublicSubnetIds]
          - !Join [',', !Ref PrivateSubnetIds]
        EnablePublicAccess: !Ref EnablePublicBastion
        EnableFullAccessFromCidr: !Ref EnableBastionFullAccessFromCidr
        
  RedshiftSecrets:
    Condition: CreateRedshift
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './secret_pair.template'
      Parameters:
        Username: !Ref RedshiftUsername
        SecretName: '/databases/redshift/admin'

  RedshiftStack:
    Condition: CreateRedshift
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './redshift.template'
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !Join [',', !Ref PrivateSubnetIds]
        DatabaseName: !Ref RedshiftDatabaseName
        UsernameSecret: !GetAtt RedshiftSecrets.Outputs.Arn
        NumberOfNodes: 1
        PubliclyAccessible: 'false'
        RedshiftInboundCIDR: !Ref VpcCidr

  AuroraSecrets:
    Condition: CreateAurora
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './secret_pair.template'
      Parameters:
        Username: !Ref AuroraUsername
        SecretName: !Sub "/databases/${AuroraDatabaseName}/admin"

  AuroraStack:
    Condition: CreateAurora
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './aurora.template'
      Parameters:
        DBName: !Ref AuroraDatabaseName
        UsernameSecret: !GetAtt AuroraSecrets.Outputs.Arn
        VpcId: !Ref VpcId
        SubnetIds: !Join [',', !Ref PrivateSubnetIds]
        AccessCidr: !Ref VpcCidr
        
  LegacyDatabaseSecrets:
    Condition: CreateLegacyDatabase
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './secret_pair.template'
      Parameters:
        Username: !Ref LegacyDatabaseUsername
        SecretName: !Sub "/databases/${LegacyDatabaseName}/admin"

  LegacyDatabaseStack:
    Condition: CreateLegacyDatabase
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './aurora.template'
      Parameters:
        DBName: !Ref LegacyDatabaseName
        UsernameSecret: !GetAtt LegacyDatabaseSecrets.Outputs.Arn
        VpcId: !Ref VpcId
        SubnetIds: !Join [',', !Ref PrivateSubnetIds]
        AccessCidr: !Ref VpcCidr

  DMSStack:
    Condition: CreateDMS
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './dms.template'
      Parameters:
        VpcId: !Ref VpcId
        AccessCidr: !Ref VpcCidr
        TargetDatabasePort: !If [CreateAurora, 3306, !Ref AWS::NoValue]
        SubnetIds: !Join [',', !Ref PrivateSubnetIds]
        SourceDatabaseName: !Ref LegacyDatabaseName
        SourceDatabaseEngine: aurora
        SourceDatabaseUsername: !Join ['', ['{{resolve:secretsmanager:', !GetAtt LegacyDatabaseSecrets.Outputs.Arn, ':SecretString:username}}' ]]
        SourceDatabasePassword: !Join ['', ['{{resolve:secretsmanager:', !GetAtt LegacyDatabaseSecrets.Outputs.Arn, ':SecretString:password}}' ]]
        SourceDatabasePort: !GetAtt LegacyDatabaseStack.Outputs.Port
        SourceDatabaseAddress: !GetAtt LegacyDatabaseStack.Outputs.ClusterEndpoint
        TargetDatabaseName: !Ref AuroraDatabaseName
        TargetDatabaseEngine: aurora
        TargetDatabaseUsername: !Join ['', ['{{resolve:secretsmanager:', !GetAtt AuroraSecrets.Outputs.Arn, ':SecretString:username}}' ]]
        TargetDatabasePassword: !Join ['', ['{{resolve:secretsmanager:', !GetAtt AuroraSecrets.Outputs.Arn, ':SecretString:password}}' ]]
        TargetDatabasePort: !GetAtt AuroraStack.Outputs.Port
        TargetDatabaseAddress: !GetAtt AuroraStack.Outputs.ClusterEndpoint

Outputs:
  BastionAutoScalingGroup:
    Value: GetAtt PrivateBastion.Outputs.BastionAutoScalingGroup
    Description: |
      'aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[].Instances[].{InstanceId: InstanceId, LaunchConfigurationName: LaunchConfigurationName}'
